#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/klor.h"

#define ___ &trans

#define QWE 0
#define HDN 1
#define NAV 2
#define NUM 3
#define SYM 4

/* Timeless homerow mods */

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH0 LH1 LH2 LH3 RH0 RH1 RH2 RH3                                        // thumbs

ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    quick-tap-ms = <175>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    quick-tap-ms = <175>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    bindings = <&kp>, <&kp>;
)

/* Custom behaviors */

// tap: backspace | shift + tap: delete | hold: num layer
ZMK_MOD_MORPH(bs_del_num,
    bindings = <&lt NUM BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: space | hold: nav layer
ZMK_HOLD_TAP(space_nav,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
    bindings = <&mo>, <&kp>;
)

// toggle between QWERTY and Hands Down
ZMK_BEHAVIOR(tog_hdn, tap_dance, 
    tapping-term-ms = <200>;
    bindings = <&to HDN>, <&to QWE>;
)

/* Adaptive Keys */

// GM -> GL: M key outputs L when preceded by G
behaviors {
    ak_m: ak_m {
        compatible = "zmk,behavior-adaptive-key";
        bindings = <&kp M>;
        akt_gm { 
            trigger-keys = <G>; 
            max-prior-idle-ms = <300>; 
            bindings = <&kp L>; 
        };
    };
    
    // MG -> LG: G key outputs L when preceded by M
    ak_g: ak_g {
        compatible = "zmk,behavior-adaptive-key";
        bindings = <&kp G>;
        akt_mg { 
            trigger-keys = <M>; 
            max-prior-idle-ms = <300>; 
            bindings = <&kp L>; 
        };
    };
    
    // MW -> MP: W key outputs P when preceded by M
    ak_w: ak_w {
        compatible = "zmk,behavior-adaptive-key";
        bindings = <&kp W>;
        akt_mw { 
            trigger-keys = <M>; 
            max-prior-idle-ms = <300>; 
            bindings = <&kp P>; 
        };
    };
    
    // DF -> DW, PF -> PS: F key outputs W when preceded by D, S when preceded by P
    ak_f: ak_f {
        compatible = "zmk,behavior-adaptive-key";
        bindings = <&kp F>;
        akt_df { 
            trigger-keys = <D>; 
            max-prior-idle-ms = <300>; 
            bindings = <&kp W>; 
        };
        akt_pf { 
            trigger-keys = <P>; 
            max-prior-idle-ms = <300>; 
            bindings = <&kp S>; 
        };
    };
    
    // FP -> SP: P key outputs S when preceded by F
    ak_p: ak_p {
        compatible = "zmk,behavior-adaptive-key";
        bindings = <&kp P>;
        akt_fp { 
            trigger-keys = <F>; 
            max-prior-idle-ms = <300>; 
            bindings = <&kp S>; 
        };
    };
};

/* Custom behaviors */

// combos
ZMK_COMBO(esc,       &kp ESC,       LT1 LT2, ALL)
ZMK_COMBO(tab,       &kp TAB,       LT2 LT3, ALL)
ZMK_COMBO(caps_word, &caps_word,    LM1 LM2, ALL)
ZMK_COMBO(ret,       &kp RETURN,    RM1 RM2, ALL)

/* Keymap */

ZMK_LAYER(qwerty_layer,
                   // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                         &kp Q         &kp W         &kp E         &kp R         &kp T                                                 &kp Y         &kp U         &kp I         &kp O         &kp P
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &hml LGUI A   &hml LALT S   &hml LCTRL D  &hml LSHFT F  &kp G                                                  &kp H         &hmr RSHFT J  &hmr LCTRL K  &hmr LALT L   &hmr LGUI SEMI &kp SQT
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LSHFT     &kp Z         &kp X         &kp C         &kp V         &kp B          &kp C_MUTE    &kp C_VOL_UP              &kp N       &kp M         &kp COMMA     &kp DOT       &kp FSLH      &kp RSHFT
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                     &kp LCTRL     &kp LALT      &space_nav NAV SPACE &mo SYM                                       &bs_del_num   &kp RETURN    &tog_hdn      &kp RCTRL
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────╯                                     ╰─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(hands_down_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp V         &ak_w         &ak_g         &ak_m         &kp J                                                 &kp SEMI      &kp DOT       &kp APOS      &kp EQUAL     &kp SLASH
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &hml LGUI Z   &hml LALT S   &hml LCTRL N  &hml LSHFT T  &kp H                                                  &kp COMMA     &hmr RSHFT A  &hmr LCTRL E  &hmr LALT I   &hmr LGUI C   &kp SQT
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LSHFT     &kp Q         &ak_p         &ak_f         &kp D         &kp L          &kp C_MUTE    &kp C_VOL_UP              &kp X       &kp MINUS     &kp U         &kp O         &kp Y         &kp B
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                     &kp LCTRL     &kp LALT      &kp R         &mo SYM                                                &bs_del_num   &space_nav NAV SPACE &tog_hdn   &kp RCTRL
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────╯                                     ╰─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(nav_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp LG(N1)    &kp LG(N2)    &kp LG(N3)    &kp LG(N4)    &kp LG(N5)        &kp LG(N6)    &kp LG(N7)    &kp LG(N8)    &kp LG(N9)    &kp LG(N0)
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp ESC       &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     &kp BSPC          &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &kp HOME      &kp END
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LSHFT     &kp LG(LS(N1)) &kp LG(LS(N2)) &kp LG(LS(N3)) &kp LG(LS(N4)) &kp LG(LS(N5)) &kp C_PREV &kp C_NEXT &kp LG(LS(N6)) &kp LG(LS(N7)) &kp LG(LS(N8)) &kp LG(LS(N9)) &kp LG(LS(N0)) &kp RSHFT
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                     ___           ___           ___           ___               &kp PG_UP     &kp PG_DN     ___           ___
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp F1        &kp F2        &kp F3        &kp F4        &kp F5            &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp ESC       &kp N1        &kp N2        &kp N3        &kp N4        &kp N5            &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &kp BSPC
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LSHFT     ___           ___           ___           ___           ___       &kp C_VOL_DN  &kp C_VOL_UP  ___           ___           &kp F11       &kp F12       ___           &kp RSHFT
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                     ___           ___           ___           ___               ___           ___           ___           ___
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sym_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT         &kp CARET     &kp AMPS      &kp ASTRK     &kp LPAR      &kp RPAR
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp ESC       &kp GRAVE     &kp TILDE     &kp LBKT      &kp RBKT      &kp PIPE          &kp MINUS     &kp EQUAL     &kp LBRC      &kp RBRC      &kp BSLH      &kp BSPC
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LSHFT     ___           ___           ___           ___           ___       &mo NUM       &mo NUM       &kp UNDER     &kp PLUS      ___           ___           ___           &kp RSHFT
     // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                     ___           ___           ___           ___               ___           ___           ___           ___
     //                             ╰─────────────┴─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────┴─────────────╯
)
